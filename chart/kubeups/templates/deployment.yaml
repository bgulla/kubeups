apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: kubeups
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: prometheus-server
  template:
    metadata:
      labels:
        app: prometheus-server
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
      containers:
        - name: prometheus
          image: prom/prometheus:v2.2.1
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-storage-volume
              mountPath: /prometheus/
      volumes:
        - name: prometheus-config-volume
          configMap:
            defaultMode: 420
            name: prometheus-server-conf

        - name: prometheus-storage-volume
          emptyDir: {}
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
  namespace: kubeups
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana-server
  template:
    metadata:
      labels:
        app: grafana-server
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
      containers:
        - name: grafana
          image: grafana/grafana:6.6.2
          env:
          - name: GF_AUTH_BASIC_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true"
          ports:
            - containerPort: 3000
          volumeMounts:
          - mountPath: /var/lib/grafana
            name: grafana-storage
          - mountPath: /etc/grafana/provisioning/datasources
            name: grafana-datasources
            readOnly: false
          - name: grafana-config
            mountPath: /etc/grafana/provisioning/dashboards/dashboardConfig.yaml
            subPath: dashboardConfig.yaml
          - mountPath: /var/lib/grafana/dashboards/kubeUPS-dashboard.json
            name: dashboard-templates
            subPath: kubeUPS-dashboard.json
      volumes:
        - name: grafana-storage
          emptyDir: {}
        - name: grafana-datasources
          configMap:
              defaultMode: 420
              name: grafana-datasources
        - name: grafana-config
          configMap:
            name: grafana-config
            items:
            - key: dashboardConfig.yaml
              path: dashboardConfig.yaml
        - name: dashboard-templates
          configMap:
            defaultMode: 420
            items:
            - key: kubeUPS-dashboard.json
              path: kubeUPS-dashboard.json
            name: kubeups-dashboard
          